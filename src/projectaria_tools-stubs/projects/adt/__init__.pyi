from typing import Any, ClassVar, Dict, List, Optional, Tuple

import _core_pybinds.calibration
import _core_pybinds.data_provider
import _core_pybinds.image
import _core_pybinds.mps
import _core_pybinds.sensor_data
import _core_pybinds.sophus
import _core_pybinds.stream_id
import numpy
DEFORMABLE: RigidityType
DYNAMIC: MotionType
HUMAN: InstanceType
OBJECT: InstanceType
RIGID: RigidityType
STATIC: MotionType
UNKNOWN: MotionType

class Aria3dPose:
    device_linear_velocity: numpy.ndarray[numpy.float64[3,1]]
    device_rotational_velocity: numpy.ndarray[numpy.float64[3,1]]
    transform_scene_device: _core_pybinds.sophus.SE3d
    def __init__(self) -> None: ...

class Aria3dPoseDataWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> Aria3dPose: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class AriaDigitalTwinDataPaths:
    aria_trajectory_filepath: str
    aria_vrs_filepath: str
    boundingboxes_2d_filepath: str
    depth_images_filepath: str
    eyegazes_filepath: str
    instances_filepath: str
    metadata_filepath: str
    object_boundingbox_3d_filepath: str
    object_trajectories_filepath: str
    segmentations_filepath: str
    skeleton_metadata_filepath: str
    skeletons_filepaths: skeleton files
    synthetic_vrs_filepath: str
    def __init__(self, *args, **kwargs) -> None: ...

class AriaDigitalTwinDataPathsProvider:
    def __init__(self, arg0: str) -> None: ...
    def get_datapaths_by_device_num(self, device_num: int, skeleton_flag: bool = ...) -> Optional[AriaDigitalTwinDataPaths]: ...
    def get_datapaths_by_device_serial(self, device_serial: str, skeleton_flag: bool = ...) -> Optional[AriaDigitalTwinDataPaths]: ...
    def get_device_serial_numbers(self) -> List[str]: ...
    def get_num_skeletons(self) -> int: ...
    def get_scene_name(self) -> str: ...
    def is_multi_person(self) -> bool: ...

class AriaDigitalTwinDataProvider:
    def __init__(self, arg0: AriaDigitalTwinDataPaths) -> None: ...
    def depth_data_provider_ptr(self) -> _core_pybinds.data_provider.VrsDataProvider: ...
    def get_aria_3d_pose_by_timestamp_ns(self, device_timestamp_ns: int, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> Aria3dPoseDataWithDt: ...
    def get_aria_all_streams(self) -> List[_core_pybinds.stream_id.StreamId]: ...
    def get_aria_camera_calibration(self, stream_id: _core_pybinds.stream_id.StreamId) -> Optional[_core_pybinds.calibration.CameraCalibration]: ...
    def get_aria_device_capture_timestamps_ns(self, stream_id: _core_pybinds.stream_id.StreamId) -> List[int]: ...
    def get_aria_image_by_timestamp_ns(self, device_time_stamp_ns: int, stream_id: _core_pybinds.stream_id.StreamId, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> AriaImageDataWithDt: ...
    def get_aria_transform_device_camera(self, stream_id: _core_pybinds.stream_id.StreamId) -> _core_pybinds.sophus.SE3d: ...
    def get_depth_image_by_timestamp_ns(self, device_timestamp_ns: int, stream_id: _core_pybinds.stream_id.StreamId, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> DepthDataWithDt: ...
    def get_device_time_from_timecode_ns(self, timecode_ns: int) -> int: ...
    def get_end_time_ns(self) -> int: ...
    def get_eyegaze_by_timestamp_ns(self, device_timestamp_ns: int, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> EyeGazeWithDt: ...
    def get_instance_ids(self) -> List[int]: ...
    def get_instance_info_by_id(self, instance_id: int) -> InstanceInfo: ...
    def get_object_2d_boundingboxes_by_timestamp_ns(self, device_timestamp_ns: int, stream_id: _core_pybinds.stream_id.StreamId, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> BoundingBox2dDataWithDt: ...
    def get_object_3d_boundingboxes_by_timestamp_ns(self, device_timestamp_ns: int, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> BoundingBox3dDataWithDt: ...
    def get_object_ids(self) -> List[int]: ...
    def get_segmentation_image_by_timestamp_ns(self, device_timestamp_ns: int, stream_id: _core_pybinds.stream_id.StreamId, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> SegmentationDataWithDt: ...
    def get_skeleton_2d_boundingboxes_by_timestamp_ns(self, device_timestamp_ns: int, stream_id: _core_pybinds.stream_id.StreamId, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> BoundingBox2dDataWithDt: ...
    def get_skeleton_by_timestamp_ns(self, device_timeStamp_ns: int, instance_id: int, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> SkeletonFrameWithDt: ...
    def get_skeleton_ids(self) -> List[int]: ...
    def get_skeleton_provider(self, instance_id: int) -> AriaDigitalTwinSkeletonProvider: ...
    def get_start_time_ns(self) -> int: ...
    def get_synthetic_image_by_timestamp_ns(self, device_timestamp_ns: int, stream_id: _core_pybinds.stream_id.StreamId, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> SyntheticDataWithDt: ...
    def get_timecode_from_device_time_ns(self, device_time_ns: int) -> int: ...
    def has_aria_3d_poses(self) -> bool: ...
    def has_depth_images(self) -> bool: ...
    def has_eyegaze(self) -> bool: ...
    def has_instance_2d_boundingboxes(self) -> bool: ...
    def has_instance_id(self, instance_id: int) -> bool: ...
    def has_instances_info(self) -> bool: ...
    def has_object_3d_boundingboxes(self) -> bool: ...
    def has_segmentation_images(self) -> bool: ...
    def has_skeleton(self) -> bool: ...
    def has_synthetic_images(self) -> bool: ...
    def raw_data_provider_ptr(self) -> _core_pybinds.data_provider.VrsDataProvider: ...
    def segmentation_data_provider_ptr(self) -> _core_pybinds.data_provider.VrsDataProvider: ...
    def synthetic_data_provider_ptr(self) -> _core_pybinds.data_provider.VrsDataProvider: ...

class AriaDigitalTwinSkeletonProvider:
    def __init__(self, arg0: str) -> None: ...
    def get_joint_connections(self) -> List[Tuple[int,int]]: ...
    def get_joint_labels(self) -> List[str]: ...
    def get_marker_labels(self) -> List[str]: ...
    def get_skeleton_by_timestamp_ns(self, device_timestamp_ns: int, time_query_options: _core_pybinds.sensor_data.TimeQueryOptions = ...) -> SkeletonFrameWithDt: ...

class AriaImageDataWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> _core_pybinds.sensor_data.ImageData: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class BoundingBox2dData:
    box_range: numpy.ndarray[numpy.float32[4,1]]
    visibility_ratio: float
    def __init__(self) -> None: ...

class BoundingBox2dDataWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> Dict[int,BoundingBox2dData]: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class BoundingBox3dData:
    aabb: numpy.ndarray[numpy.float64[6,1]]
    transform_scene_object: _core_pybinds.sophus.SE3d
    def __init__(self) -> None: ...

class BoundingBox3dDataWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> Dict[int,BoundingBox3dData]: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class CanonicalPose:
    front_vector: numpy.ndarray[numpy.float64[3,1]]
    up_vector: numpy.ndarray[numpy.float64[3,1]]
    def __init__(self, *args, **kwargs) -> None: ...

class DepthData:
    def __init__(self) -> None: ...
    def at(self, x: int, y: int) -> int: ...
    def get_height(self) -> int: ...
    def get_visualizable(self) -> _core_pybinds.image.ManagedImageU8: ...
    def get_width(self) -> int: ...
    def is_valid(self) -> bool: ...
    def to_numpy_array(self, *args, **kwargs) -> Any: ...

class DepthDataWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> DepthData: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class EyeGazeWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> _core_pybinds.mps.EyeGaze: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class InstanceInfo:
    associated_device_serial: str
    canonical_pose: CanonicalPose
    category: str
    category_uid: int
    id: int
    instance_type: InstanceType
    motion_type: MotionType
    name: str
    prototype_name: str
    rigidity_type: RigidityType
    rotational_symmetry: RotationalSymmetry
    def __init__(self, *args, **kwargs) -> None: ...

class InstanceType:
    __members__: ClassVar[dict] = ...  # read-only
    HUMAN: ClassVar[InstanceType] = ...
    OBJECT: ClassVar[InstanceType] = ...
    UNKNOWN: ClassVar[InstanceType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class MotionType:
    __members__: ClassVar[dict] = ...  # read-only
    DYNAMIC: ClassVar[MotionType] = ...
    STATIC: ClassVar[MotionType] = ...
    UNKNOWN: ClassVar[MotionType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RigidityType:
    __members__: ClassVar[dict] = ...  # read-only
    DEFORMABLE: ClassVar[RigidityType] = ...
    RIGID: ClassVar[RigidityType] = ...
    UNKNOWN: ClassVar[RigidityType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RotationalSymmetry:
    axes: List[RotationalSymmetryAxis]
    is_annotated: bool
    def __init__(self, *args, **kwargs) -> None: ...

class RotationalSymmetryAxis:
    angle_degree: float
    axis: numpy.ndarray[numpy.float64[3,1]]
    def __init__(self, *args, **kwargs) -> None: ...

class SegmentationData:
    def __init__(self) -> None: ...
    def at(self, x: int, y: int) -> int: ...
    def get_height(self) -> int: ...
    def get_visualizable(self) -> _core_pybinds.image.ManagedImage3U8: ...
    def get_width(self) -> int: ...
    def is_valid(self) -> bool: ...
    def to_numpy_array(self, *args, **kwargs) -> Any: ...

class SegmentationDataWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> SegmentationData: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class SkeletonFrame:
    joints: List[numpy.ndarray[numpy.float64[3,1]]]
    markers: List[numpy.ndarray[numpy.float64[3,1]]]
    def __init__(self) -> None: ...

class SkeletonFrameWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> SkeletonFrame: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

class SyntheticData:
    def __init__(self) -> None: ...
    def at(self, *args, **kwargs) -> Any: ...
    def get_height(self) -> int: ...
    def get_visualizable(self, *args, **kwargs) -> Any: ...
    def get_width(self) -> int: ...
    def is_valid(self) -> bool: ...
    def to_numpy_array(self, *args, **kwargs) -> Any: ...

class SyntheticDataWithDt:
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self) -> SyntheticData: ...
    def dt_ns(self) -> int: ...
    def is_valid(self) -> bool: ...

def bbox2d_to_image_coordinates(bbox: numpy.ndarray[numpy.float32[4,1]]) -> List[numpy.ndarray[numpy.float64[2,1]]]: ...
def bbox2d_to_image_line_coordinates(bbox: numpy.ndarray[numpy.float32[4,1]]) -> List[numpy.ndarray[numpy.float64[2,1]]]: ...
def bbox3d_to_coordinates(bbox: numpy.ndarray[numpy.float64[6,1]]) -> List[numpy.ndarray[numpy.float64[3,1]]]: ...
def bbox3d_to_line_coordinates(bbox: numpy.ndarray[numpy.float64[6,1]]) -> List[numpy.ndarray[numpy.float64[3,1]]]: ...
def get_interpolated_aria_3d_pose_at_timestamp_ns(provider: AriaDigitalTwinDataProvider, device_time_stamp_ns: int) -> Aria3dPoseDataWithDt: ...
def get_interpolated_object_3d_boundingboxes_at_timestamp_ns(provider: AriaDigitalTwinDataProvider, device_time_stamp_ns: int) -> BoundingBox3dDataWithDt: ...
