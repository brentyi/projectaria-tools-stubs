from typing import Any, ClassVar, Dict, List, Optional, overload

import numpy
import projectaria_tools.core.sophus

ARIA_ET_CALIBRATION: SensorCalibrationType
ARIA_MIC_CALIBRATION: SensorCalibrationType
BAROMETER_CALIBRATION: SensorCalibrationType
CAMERA_CALIBRATION: SensorCalibrationType
FISHEYE624: CameraModelType
IMU_CALIBRATION: SensorCalibrationType
KANNALA_BRANDT_K3: CameraModelType
LINEAR: CameraModelType
MAGNETOMETER_CALIBRATION: SensorCalibrationType
MICROPHONE_CALIBRATION: SensorCalibrationType
NOT_VALID: SensorCalibrationType
SPHERICAL: CameraModelType

class BarometerCalibration:
    def __init__(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def get_label(self) -> str: ...
    def raw_to_rectified(self, raw: float) -> float: ...
    def rectified_to_raw(self, rectified: float) -> float: ...

class CameraCalibration:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        arg0: str,
        arg1: CameraModelType,
        arg2: numpy.ndarray[numpy.float64[m, 1]],
        arg3: projectaria_tools.core.sophus.SE3d,
        arg4: int,
        arg5: int,
        arg6: Optional[float],
        arg7: float,
    ) -> None: ...
    def get_focal_lengths(self) -> numpy.ndarray[numpy.float64[2, 1]]: ...
    def get_image_size(self) -> numpy.ndarray[numpy.int32[2, 1]]: ...
    def get_label(self) -> str: ...
    def get_principal_point(self) -> numpy.ndarray[numpy.float64[2, 1]]: ...
    def get_transform_device_camera(self) -> projectaria_tools.core.sophus.SE3d: ...
    def is_visible(self, camera_pixel: numpy.ndarray[numpy.float64[2, 1]]) -> bool: ...
    def model_name(self) -> CameraModelType: ...
    def project(
        self, point_in_camera: numpy.ndarray[numpy.float64[3, 1]]
    ) -> Optional[numpy.ndarray[numpy.float64[2, 1]]]: ...
    def project_no_checks(
        self, point_in_camera: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[2, 1]]: ...
    def projection_params(self) -> numpy.ndarray[numpy.float64[m, 1]]: ...
    def unproject(
        self, camera_pixel: numpy.ndarray[numpy.float64[2, 1]]
    ) -> Optional[numpy.ndarray[numpy.float64[3, 1]]]: ...
    def unproject_no_checks(
        self, camera_pixel: numpy.ndarray[numpy.float64[2, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...

class CameraModelType:
    __members__: ClassVar[dict] = ...  # read-only
    FISHEYE624: ClassVar[CameraModelType] = ...
    KANNALA_BRANDT_K3: ClassVar[CameraModelType] = ...
    LINEAR: ClassVar[CameraModelType] = ...
    SPHERICAL: ClassVar[CameraModelType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class CameraProjection:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1: numpy.ndarray[numpy.float64[m, 1]]) -> None: ...
    def get_focal_lengths(self) -> numpy.ndarray[numpy.float64[2, 1]]: ...
    def get_principal_point(self) -> numpy.ndarray[numpy.float64[2, 1]]: ...
    def model_name(self, *args, **kwargs) -> Any: ...
    def project(
        self, point_in_camera: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[2, 1]]: ...
    def projection_params(self) -> numpy.ndarray[numpy.float64[m, 1]]: ...
    def unproject(
        self, camera_pixel: numpy.ndarray[numpy.float64[2, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...

class DeviceCadExtrinsics:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str) -> None: ...

class DeviceCalibration:
    def __init__(
        self,
        arg0: Dict[str, CameraCalibration],
        arg1: Dict[str, ImuCalibration],
        arg2: Dict[str, MagnetometerCalibration],
        arg3: Dict[str, BarometerCalibration],
        arg4: Dict[str, MicrophoneCalibration],
        arg5: DeviceCadExtrinsics,
        arg6: str,
        arg7: str,
    ) -> None: ...
    def get_all_labels(self) -> List[str]: ...
    def get_aria_et_camera_calib(self, *args, **kwargs) -> Any: ...
    def get_aria_microphone_calib(self, *args, **kwargs) -> Any: ...
    def get_barometer_calib(self, label: str) -> Optional[BarometerCalibration]: ...
    def get_barometer_labels(self) -> List[str]: ...
    def get_camera_calib(self, label: str) -> Optional[CameraCalibration]: ...
    def get_camera_labels(self) -> List[str]: ...
    def get_device_subtype(self) -> str: ...
    def get_imu_calib(self, label: str) -> Optional[ImuCalibration]: ...
    def get_imu_labels(self) -> List[str]: ...
    def get_magnetometer_calib(
        self, label: str
    ) -> Optional[MagnetometerCalibration]: ...
    def get_magnetometer_labels(self) -> List[str]: ...
    def get_microphone_calib(self, label: str) -> Optional[MicrophoneCalibration]: ...
    def get_microphone_labels(self) -> List[str]: ...
    def get_origin_label(self) -> str: ...
    def get_sensor_calib(self, label: str) -> Optional[SensorCalibration]: ...
    def get_transform_cpf_sensor(
        self, label: str, get_cad_value: bool = ...
    ) -> Optional[projectaria_tools.core.sophus.SE3d]: ...
    def get_transform_device_cpf(self) -> projectaria_tools.core.sophus.SE3d: ...
    def get_transform_device_sensor(
        self, label: str, get_cad_value: bool = ...
    ) -> Optional[projectaria_tools.core.sophus.SE3d]: ...

class ImuCalibration:
    def __init__(
        self,
        arg0: str,
        arg1: numpy.ndarray[numpy.float64[3, 3]],
        arg2: numpy.ndarray[numpy.float64[3, 1]],
        arg3: numpy.ndarray[numpy.float64[3, 3]],
        arg4: numpy.ndarray[numpy.float64[3, 1]],
        arg5: projectaria_tools.core.sophus.SE3d,
    ) -> None: ...
    def get_label(self) -> str: ...
    def get_transform_device_imu(self) -> projectaria_tools.core.sophus.SE3d: ...
    def raw_to_rectified_accel(
        self, raw: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    def raw_to_rectified_gyro(
        self, raw: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    def rectified_to_raw_accel(
        self, rectified: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    def rectified_to_raw_gyro(
        self, rectified: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...

class MagnetometerCalibration:
    def __init__(
        self,
        arg0: str,
        arg1: numpy.ndarray[numpy.float64[3, 3]],
        arg2: numpy.ndarray[numpy.float64[3, 1]],
    ) -> None: ...
    def get_label(self) -> str: ...
    def raw_to_rectified(
        self, raw: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    def rectified_to_raw(
        self, rectified: numpy.ndarray[numpy.float64[3, 1]]
    ) -> numpy.ndarray[numpy.float64[3, 1]]: ...

class MicrophoneCalibration:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: float) -> None: ...
    def get_label(self) -> str: ...
    def raw_to_rectified(self, raw: float) -> float: ...
    def rectified_to_raw(self, rectified: float) -> float: ...

class SensorCalibration:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    def aria_et_calibration(self, *args, **kwargs) -> Any: ...
    def aria_mic_calibration(self, *args, **kwargs) -> Any: ...
    def barometer_calibration(self) -> BarometerCalibration: ...
    def camera_calibration(self) -> CameraCalibration: ...
    def imu_calibration(self) -> ImuCalibration: ...
    def magnetometer_calibration(self) -> MagnetometerCalibration: ...
    def microphone_calibration(self) -> MicrophoneCalibration: ...
    def sensor_calibration_type(self) -> SensorCalibrationType: ...

class SensorCalibrationType:
    __members__: ClassVar[dict] = ...  # read-only
    ARIA_ET_CALIBRATION: ClassVar[SensorCalibrationType] = ...
    ARIA_MIC_CALIBRATION: ClassVar[SensorCalibrationType] = ...
    BAROMETER_CALIBRATION: ClassVar[SensorCalibrationType] = ...
    CAMERA_CALIBRATION: ClassVar[SensorCalibrationType] = ...
    IMU_CALIBRATION: ClassVar[SensorCalibrationType] = ...
    MAGNETOMETER_CALIBRATION: ClassVar[SensorCalibrationType] = ...
    MICROPHONE_CALIBRATION: ClassVar[SensorCalibrationType] = ...
    NOT_VALID: ClassVar[SensorCalibrationType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def distort_by_calibration(*args, **kwargs) -> Any: ...
def get_linear_camera_calibration(
    image_width: int, image_height: int, focal_length: float, label: str = ...
) -> CameraCalibration: ...
def get_spherical_camera_calibration(
    image_width: int, image_height: int, focal_length: float, label: str = ...
) -> CameraCalibration: ...
