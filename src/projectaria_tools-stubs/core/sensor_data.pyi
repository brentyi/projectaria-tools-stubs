from typing import Any, ClassVar, List, Tuple, Union

import _core_pybinds.stream_id
AFTER: TimeQueryOptions
AUDIO: SensorDataType
BAROMETER: SensorDataType
BEFORE: TimeQueryOptions
BLUETOOTH: SensorDataType
CLOSEST: TimeQueryOptions
DEVICE_TIME: TimeDomain
GPS: SensorDataType
HOST_TIME: TimeDomain
IMAGE: SensorDataType
IMU: SensorDataType
MAGNETOMETER: SensorDataType
NOT_VALID: SensorDataType
RECORD_TIME: TimeDomain
TIME_CODE: TimeDomain
WPS: SensorDataType

class AudioConfig:
    num_channels: int
    sample_format: int
    sample_rate: int
    stream_id: int
    def __init__(self) -> None: ...

class AudioData:
    data: List[int]
    def __init__(self) -> None: ...

class AudioDataRecord:
    audio_muted: int
    capture_timestamps_ns: List[int]
    def __init__(self) -> None: ...

class BarometerConfigRecord:
    sample_rate: float
    sensor_model_name: str
    stream_id: int
    def __init__(self) -> None: ...

class BarometerData:
    altitude: float
    capture_timestamp_ns: int
    pressure: float
    temperature: float
    def __init__(self) -> None: ...

class BluetoothBeaconConfigRecord:
    sample_rate_hz: float
    streamId: int
    def __init__(self) -> None: ...

class BluetoothBeaconData:
    board_scan_request_complete_timestamp_ns: int
    board_scan_request_start_timestamp_ns: int
    board_timestamp_ns: int
    freq_mhz: float
    rssi: float
    system_timestamp_ns: int
    tx_power: float
    unique_id: str
    def __init__(self) -> None: ...

class GpsConfigRecord:
    sample_rate_hz: float
    stream_id: int
    def __init__(self) -> None: ...

class GpsData:
    accuracy: float
    altitude: float
    capture_timestamp_ns: int
    latitude: float
    longitude: float
    provider: str
    raw_data: List[str]
    speed: float
    utc_time_ms: int
    def __init__(self) -> None: ...

class ImageConfigRecord:
    camera_id: int
    description: str
    device_serial: str
    device_type: str
    device_version: str
    exposure_duration_max: float
    exposure_duration_min: float
    factory_calibration: str
    gain_max: float
    gain_min: float
    gamma_factor: float
    image_height: int
    image_stride: int
    image_width: int
    nominal_rate_hz: float
    online_calibration: str
    pixel_format: int
    sensor_model: str
    sensor_serial: str
    def __init__(self) -> None: ...

class ImageData:
    pixel_frame: PixelFrame
    def __init__(self) -> None: ...
    def at(self, x, y, channel) -> Any: ...
    def get_height(self) -> int: ...
    def get_width(self) -> int: ...
    def is_valid(self) -> bool: ...
    def to_numpy_array(self, *args, **kwargs) -> Any: ...

class ImageDataRecord:
    arrival_timestamp_ns: int
    capture_timestamp_ns: int
    exposure_duration: float
    frame_number: int
    gain: float
    group_id: int
    group_mask: int
    temperature: float
    def __init__(self) -> None: ...

class MotionConfigRecord:
    description: str
    device_id: int
    device_serial: str
    device_type: str
    factory_calibration: str
    has_accelerometer: bool
    has_gyroscope: bool
    has_magnetometer: bool
    nominal_rate_hz: float
    online_calibration: str
    sensor_model: str
    stream_index: int
    def __init__(self) -> None: ...

class MotionData:
    accel_msec2: List[float]
    accel_valid: bool
    arrival_timestamp_ns: int
    capture_timestamp_ns: int
    gyro_radsec: List[float]
    gyro_valid: bool
    mag_tesla: List[float]
    mag_valid: bool
    temperature: float
    def __init__(self) -> None: ...

class PixelFrame:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_buffer(self) -> List[int]: ...
    def get_height(self) -> int: ...
    def get_width(self) -> int: ...
    def normalize_frame(self, arg0: bool) -> PixelFrame: ...

class SensorConfiguration:
    def __init__(self, arg0: Union[None,ImageConfigRecord,MotionConfigRecord,GpsConfigRecord,WifiBeaconConfigRecord,AudioConfig,BarometerConfigRecord,BluetoothBeaconConfigRecord], arg1: SensorDataType) -> None: ...
    def audio_configuration(self) -> AudioConfig: ...
    def barometer_configuration(self) -> BarometerConfigRecord: ...
    def bluetooth_configuration(self) -> BluetoothBeaconConfigRecord: ...
    def get_nominal_rate_hz(self) -> float: ...
    def gps_configuration(self) -> GpsConfigRecord: ...
    def image_configuration(self) -> ImageConfigRecord: ...
    def magnetometer_configuration(self) -> MotionConfigRecord: ...
    def motion_configuration(self) -> MotionConfigRecord: ...
    def sensor_data_type(self) -> SensorDataType: ...
    def wps_configuration(self) -> WifiBeaconConfigRecord: ...

class SensorData:
    def __init__(self, arg0: _core_pybinds.stream_id.StreamId, arg1: Union[None,Tuple[ImageData,ImageDataRecord],MotionData,GpsData,WifiBeaconData,Tuple[AudioData,AudioDataRecord],BarometerData,BluetoothBeaconData], arg2: SensorDataType, arg3: int, arg4: int) -> None: ...
    def audio_data_and_record(self) -> Tuple[AudioData,AudioDataRecord]: ...
    def barometer_data(self) -> BarometerData: ...
    def bluetooth_data(self) -> BluetoothBeaconData: ...
    def get_time_ns(self, time_domain: TimeDomain) -> int: ...
    def gps_data(self) -> GpsData: ...
    def image_data_and_record(self) -> Tuple[ImageData,ImageDataRecord]: ...
    def imu_data(self) -> MotionData: ...
    def magnetometer_data(self) -> MotionData: ...
    def sensor_data_type(self) -> SensorDataType: ...
    def stream_id(self) -> _core_pybinds.stream_id.StreamId: ...
    def wps_data(self) -> WifiBeaconData: ...

class SensorDataType:
    __members__: ClassVar[dict] = ...  # read-only
    AUDIO: ClassVar[SensorDataType] = ...
    BAROMETER: ClassVar[SensorDataType] = ...
    BLUETOOTH: ClassVar[SensorDataType] = ...
    GPS: ClassVar[SensorDataType] = ...
    IMAGE: ClassVar[SensorDataType] = ...
    IMU: ClassVar[SensorDataType] = ...
    MAGNETOMETER: ClassVar[SensorDataType] = ...
    NOT_VALID: ClassVar[SensorDataType] = ...
    WPS: ClassVar[SensorDataType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TimeDomain:
    __members__: ClassVar[dict] = ...  # read-only
    DEVICE_TIME: ClassVar[TimeDomain] = ...
    HOST_TIME: ClassVar[TimeDomain] = ...
    RECORD_TIME: ClassVar[TimeDomain] = ...
    TIME_CODE: ClassVar[TimeDomain] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TimeQueryOptions:
    __members__: ClassVar[dict] = ...  # read-only
    AFTER: ClassVar[TimeQueryOptions] = ...
    BEFORE: ClassVar[TimeQueryOptions] = ...
    CLOSEST: ClassVar[TimeQueryOptions] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class WifiBeaconConfigRecord:
    stream_id: int
    def __init__(self) -> None: ...

class WifiBeaconData:
    board_scan_request_complete_timestamp_ns: int
    board_scan_request_start_timestamp_ns: int
    board_timestamp_ns: int
    bssid_mac: str
    freq_mhz: float
    rssi: float
    rssi_per_antenna: List[float]
    ssid: str
    system_timestamp_ns: int
    def __init__(self) -> None: ...

def get_sensor_data_type_name(arg0: SensorDataType) -> str: ...
def get_time_domain_name(arg0: TimeDomain) -> str: ...
def has_calibration(type: SensorDataType) -> bool: ...
def supports_host_time_domain(type: SensorDataType) -> bool: ...
